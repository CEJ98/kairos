generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// SQLite connector in Prisma does not support enums; use string fields instead.

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  passwordHash  String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  plans         Plan[]
  bodyMetrics   BodyMetric[]
  streaks       Streak[]
  subscriptions Subscription[]
  demoAccount   DemoAccount?
  workouts      Workout[]     @relation("UserWorkouts")
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  age             Int?
  heightCm        Float?
  weightKg        Float?
  trainingMax     Float?
  progressionRule String @default("VOLUME")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id              String          @id @default(cuid())
  userId          String
  goal            String
  microcycleLength Int
  mesocycleWeeks  Int
  progressionRule String @default("VOLUME")
  trainingMax     Float? @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workouts Workout[]
  metrics  AdherenceMetric[]

  @@index([userId, createdAt])
  @@index([userId, updatedAt])
}

model Workout {
  id          String            @id @default(cuid())
  planId      String
  userId      String?
  title       String
  description String?
  scheduledAt DateTime
  completedAt DateTime?
  microcycle  Int?
  mesocycle   Int?
  rpeTarget   Float?
  restSeconds Int? @default(120)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  plan Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)
  user User? @relation("UserWorkouts", fields: [userId], references: [id])

  exercises WorkoutExercise[]
  sets      WorkoutSet[]
  adherenceMetrics AdherenceMetric[]

  @@index([planId, scheduledAt])
  @@index([userId, scheduledAt])
  @@index([planId, completedAt])
  @@index([userId, completedAt])
}

model WorkoutExercise {
  id          String   @id @default(cuid())
  workoutId   String
  exerciseId  String
  order       Int
  targetSets  Int
  targetReps  Int
  rpeTarget   Float?
  restSeconds Int
  microcycle  Int? @default(1)
  mesocycle   Int? @default(1)
  createdAt   DateTime @default(now())

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@index([workoutId])
  @@index([exerciseId])
}

model Exercise {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  videoUrl    String?
  muscleGroup String
  equipment   String
  cues        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workoutExercises WorkoutExercise[]
  workoutSets       WorkoutSet[]
}

model WorkoutSet {
  id          String   @id @default(cuid())
  workoutId   String
  exerciseId  String
  weight      Float
  reps        Int
  rpe         Float?
  rir         Float?
  restSeconds Int
  notes       String?
  createdAt   DateTime @default(now())

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@index([exerciseId, createdAt])
  @@index([workoutId, createdAt])
}

model BodyMetric {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  weightKg  Float?
  bodyFat   Float?
  neckCm    Float?
  waistCm   Float?
  hipCm     Float?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([userId, createdAt])
}

model Streak {
  id        String   @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime?
  days      Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startDate])
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  provider         String
  status           String
  currentPeriodEnd DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model DemoAccount {
  id          String   @id @default(cuid())
  userId      String   @unique
  expiresAt   DateTime
  convertedAt DateTime?
  seedVersion String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AdherenceMetric {
  id        String   @id @default(cuid())
  planId    String
  workoutId String
  adherence Float
  createdAt DateTime @default(now())

  plan    Plan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([planId, createdAt])
}

model ProgressPhoto {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  frontUrl  String?
  sideUrl   String?
  backUrl   String?
  note      String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
}
